YOLOv5 temporarily requires wandb version 0.12.10 or below. Some features may not work as expected.
                 from  n    params  module                                  arguments
  0                -1  1      3520  models.common.Conv                      [3, 32, 6, 2, 2]
  1                -1  1     18560  models.common.Conv                      [32, 64, 3, 2]
  2                -1  1     18816  models.common.C3                        [64, 64, 1]
  3                -1  1     73984  models.common.Conv                      [64, 128, 3, 2]
  4                -1  2    115712  models.common.C3                        [128, 128, 2]
  5                -1  1    295424  models.common.Conv                      [128, 256, 3, 2]
  6                -1  3    625152  models.common.C3                        [256, 256, 3]
  7                -1  1   1180672  models.common.Conv                      [256, 512, 3, 2]
  8                -1  1   1182720  models.common.C3                        [512, 512, 1]
  9                -1  1    656896  models.common.SPPF                      [512, 512, 5]
 10                -1  1    131584  models.common.Conv                      [512, 256, 1, 1]
 11                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 12           [-1, 6]  1         0  models.common.Concat                    [1]
 13                -1  1    361984  models.common.C3                        [512, 256, 1, False]
 14                -1  1     33024  models.common.Conv                      [256, 128, 1, 1]
 15                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 16           [-1, 4]  1         0  models.common.Concat                    [1]
 17                -1  1     90880  models.common.C3                        [256, 128, 1, False]
 18                -1  1    147712  models.common.Conv                      [128, 128, 3, 2]
 19          [-1, 14]  1         0  models.common.Concat                    [1]
 20                -1  1    296448  models.common.C3                        [256, 256, 1, False]
 21                -1  1    590336  models.common.Conv                      [256, 256, 3, 2]
 22          [-1, 10]  1         0  models.common.Concat                    [1]
 23                -1  1   1182720  models.common.C3                        [512, 512, 1, False]
 24      [17, 20, 23]  1     16182  models.yolo.Detect                      [1, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], [128, 256, 512]]
Model summary: 270 layers, 7022326 parameters, 7022326 gradients, 15.9 GFLOPs
      Params      GFLOPs  GPU_mem (GB)  forward (ms) backward (ms)                   input                  output
     7022326       15.95         0.256          16.3         36.45        (1, 3, 640, 640)                    list
     7022326       31.89         0.442         26.45          46.8        (2, 3, 640, 640)                    list
Transferred 349/349 items from yolov5/best.pt
[34m[1mAMP: [39m[22mchecks passed âœ…
[34m[1mAutoBatch: [39m[22mComputing optimal batch size for --imgsz 640
[34m[1mAutoBatch: [39m[22mCUDA:0 (NVIDIA GeForce GTX 1060 3GB) 2.95G total, 0.08G reserved, 0.05G allocated, 2.81G free
     7022326       63.78         0.824          49.3         92.03        (4, 3, 640, 640)                    list
     7022326       127.6         1.596         91.31         162.4        (8, 3, 640, 640)                    list
CUDA out of memory. Tried to allocate 20.00 MiB (GPU 0; 2.95 GiB total capacity; 1.86 GiB already allocated; 48.25 MiB free; 1.92 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
[34m[1mAutoBatch: [39m[22mUsing batch-size 12 for CUDA:0 2.36G/2.95G (80%) âœ…
Scaled weight_decay = 0.00046875
[34m[1moptimizer:[39m[22m SGD with parameter groups 57 weight (no decay), 60 weight, 60 bias
[34m[1mtrain: [39m[22mScanning '/home/br0fire/Tracking/yolov5/../data/labels/training.cache' im
[34m[1mval: [39m[22mScanning '/home/br0fire/Tracking/yolov5/../data/labels/validation.cache' im
Plotting labels to yolov5/runs/train/exp3/labels.jpg...
[34m[1mAutoAnchor: [39m[22m5.51 anchors/target, 1.000 Best Possible Recall (BPR). Current anchors are a good fit to dataset âœ…
Image sizes 640 train, 640 val
Using 4 dataloader workers
Logging results to [1myolov5/runs/train/exp3
Starting training for 100 epochs...
     Epoch   gpu_mem       box       obj       cls    labels  img_size
  0%|          | 0/15 [00:16<?, ?it/s]
Traceback (most recent call last):
  File "yolov5/train.py", line 667, in <module>
    main(opt)
  File "yolov5/train.py", line 562, in main
    train(opt.hyp, opt, device, callbacks)
  File "yolov5/train.py", line 353, in train
    loss, loss_items = compute_loss(pred, targets.to(device))  # loss scaled by batch_size
  File "/home/br0fire/Tracking/yolov5/utils/loss.py", line 163, in __call__
    obji = self.BCEobj(pi[..., 4], tobj)
  File "/home/br0fire/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/br0fire/.local/lib/python3.8/site-packages/torch/nn/modules/loss.py", line 713, in forward
    return F.binary_cross_entropy_with_logits(input, target,
  File "/home/br0fire/.local/lib/python3.8/site-packages/torch/nn/functional.py", line 3132, in binary_cross_entropy_with_logits
    return torch.binary_cross_entropy_with_logits(input, target, weight, pos_weight, reduction_enum)
RuntimeError: CUDA out of memory. Tried to allocate 2.00 MiB (GPU 0; 2.95 GiB total capacity; 1.84 GiB already allocated; 36.12 MiB free; 1.94 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
Traceback (most recent call last):
  File "yolov5/train.py", line 667, in <module>
    main(opt)
  File "yolov5/train.py", line 562, in main
    train(opt.hyp, opt, device, callbacks)
  File "yolov5/train.py", line 353, in train
    loss, loss_items = compute_loss(pred, targets.to(device))  # loss scaled by batch_size
  File "/home/br0fire/Tracking/yolov5/utils/loss.py", line 163, in __call__
    obji = self.BCEobj(pi[..., 4], tobj)
  File "/home/br0fire/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1110, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/br0fire/.local/lib/python3.8/site-packages/torch/nn/modules/loss.py", line 713, in forward
    return F.binary_cross_entropy_with_logits(input, target,
  File "/home/br0fire/.local/lib/python3.8/site-packages/torch/nn/functional.py", line 3132, in binary_cross_entropy_with_logits
    return torch.binary_cross_entropy_with_logits(input, target, weight, pos_weight, reduction_enum)
RuntimeError: CUDA out of memory. Tried to allocate 2.00 MiB (GPU 0; 2.95 GiB total capacity; 1.84 GiB already allocated; 36.12 MiB free; 1.94 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF